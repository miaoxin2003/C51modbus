C51 COMPILER V9.60.7.0   HOST                                                              06/17/2025 10:27:24 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE HOST
OBJECT MODULE PLACED IN HOST.OBJ
COMPILER INVOKED BY: G:\keil51\C51\BIN\C51.EXE HOST.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          //FIRMWARE FOR THE HOST
   2          #include <reg52.h>
   3          #include <intrins.h>
   4          
   5          #define Uint16 unsigned int
   6          #define Uint32 unsigned long
   7          #define uchar  unsigned char
   8          #define LCD_Data P1
   9          #define Busy    0x80 //ÓÃÓÚ¼ì²âLCD×´Ì¬×ÖÖÐµÄBusy±êÊ¶
  10          
  11          //uchar tflag;//ÎÂ¶ÈÕý¸º±êÖ¾
  12          
  13          sbit reving=P3^5;
  14          sbit rw=P3^7;
  15          //sbit tcnt=P3^5;
  16          //sbit rcnt=P3^7;
  17          
  18          sbit LCD_RS=P3^2;//¶¨ÒåÒý½Å
  19          sbit LCD_RW=P3^3;
  20          sbit LCD_E=P3^4;
  21          
  22          sbit P2_0 = P2^0; 
  23          sbit P2_1 = P2^1;
  24          sbit COOL_FAN = P2^5; 
  25          sbit HEAT_FAN = P2^0; 
  26          sbit BUZZER = P2^1;   
  27          sbit RED_LED = P2^2; 
  28          sbit GREEN_LED = P2^3; 
  29          sbit YELLOW_LED = P2^4; 
  30          sbit HUMIDIFIER = P2^7; 
  31          
  32          
  33          void InitUART(void);
  34          void SendOneByte(unsigned);
  35          void mdproc(uchar);
  36          Uint16 Crc16(Uint16 *puchMsg, Uint16 usDataLen); 
  37          
  38          void WriteDataLCD(unsigned char WDLCD);
  39          void WriteCommandLCD(unsigned char WCLCD,BuysC);
  40          unsigned char ReadDataLCD(void);
  41          unsigned char ReadStatusLCD(void);
  42          void LCDInit(void);
  43          void DisplayOneChar(unsigned char X, unsigned char Y, unsigned char DData);
  44          void DisplayListChar(unsigned char X, unsigned char Y, unsigned char *DData);
  45          void Delay5Ms(void);
  46          void Delay400Ms(void);
  47          
  48          unsigned char code row1[] = {"MODBUS FUNC:04H"};
  49          unsigned char code row2[] = {"NOW GET START"};
  50          unsigned char code row6[] = {"RH(%)     "};
  51          unsigned char code row7[] = {"TP(C)     "};
  52          
  53          
  54          /* CRC ¸ßÎ»×Ö½ÚÖµ±í */ 
  55          const Uint16 code auchCRCHi[] = { 
C51 COMPILER V9.60.7.0   HOST                                                              06/17/2025 10:27:24 PAGE 2   

  56          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 
  57          0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 
  58          0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 
  59          0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 
  60          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 
  61          0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 
  62          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 
  63          0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 
  64          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 
  65          0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 
  66          0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 
  67          0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 
  68          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 
  69          0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 
  70          0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 
  71          0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 
  72          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 
  73          0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 
  74          0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 
  75          0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 
  76          0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 
  77          0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 
  78          0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 
  79          0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 
  80          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 
  81          0x80, 0x41, 0x00, 0xC1, 0x81, 0x40 
  82          } ; 
  83          
  84          /* CRCµÍÎ»×Ö½ÚÖµ±í*/ 
  85          const Uint16 code auchCRCLo[] = { 
  86          0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 
  87          0x07, 0xC7, 0x05, 0xC5, 0xC4, 0x04, 0xCC, 0x0C, 0x0D, 0xCD, 
  88          0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09, 
  89          0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 
  90          0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC, 0x14, 0xD4, 
  91          0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3, 
  92          0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 
  93          0xF2, 0x32, 0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4, 
  94          0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A, 
  95          0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, 
  96          0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF, 0x2D, 0xED, 
  97          0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26, 
  98          0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 
  99          0x61, 0xA1, 0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67, 
 100          0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F, 
 101          0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68, 
 102          0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 
 103          0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5, 
 104          0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 
 105          0x70, 0xB0, 0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92, 
 106          0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C, 
 107          0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 
 108          0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B, 
 109          0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C, 
 110          0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 
 111          0x43, 0x83, 0x41, 0x81, 0x80, 0x40 
 112          } ;
 113          uchar asknode; // the current node for polling(ask for data in turn)
 114          uchar mtx[8],mrx[10];
 115          uchar send101[]={0x01,0x04,0x00,0x00,0x00,0x03};
 116          uchar timercnt;
 117          uchar revptr;
C51 COMPILER V9.60.7.0   HOST                                                              06/17/2025 10:27:24 PAGE 3   

 118          bit nodeok;
 119          bit procok;
 120          bit crcok;
 121          Uint16 delaycnt;
 122          
 123          uchar row4[]={"           "};
 124          uchar row5[]={"           "};
 125          
 126          void main(void)
 127          {
 128   1        unsigned char temp8;
 129   1        unsigned char RH=0,TP=0;
 130   1        Uint16 temp16;//temp16_2;
 131   1          int i;
 132   1        reving=1;
 133   1        nodeok=0;
 134   1        P2_0 = 1;
 135   1        timercnt=0x00;
 136   1        asknode=0x00;
 137   1        //temp16_2=250;
 138   1        for(i=0;i<10;i++){mrx[i]=0x00;}
 139   1        for(i=0;i<8;i++){mtx[i]=0x00;}
 140   1      //  tcnt=0;
 141   1      //  rcnt=0;
 142   1      
 143   1        Delay400Ms(); //Æô¶¯µÈ´ý£¬µÈLCD½²Èë¹¤×÷×´Ì¬
 144   1        LCDInit(); //LCM³õÊ¼»¯
 145   1        Delay5Ms(); //ÑÓÊ±Æ¬¿Ì(¿É²»Òª)
 146   1        DisplayListChar(1, 0, row1);
 147   1        DisplayListChar(2, 1, row2);
 148   1        ReadDataLCD();//²âÊÔÓÃ¾äÎÞÒâÒå  
 149   1      
 150   1        delaycnt=0xffff;
 151   1        while(delaycnt--){}
 152   1        delaycnt=0xffff;
 153   1        while(delaycnt--){}
 154   1      
 155   1        DisplayListChar(0, 0, row6);
 156   1        DisplayListChar(0, 1, row7);
 157   1        
 158   1        InitUART();
 159   1      
 160   1      /*  for(i=0;i<8;i++)
 161   1        { temp8=send101[i];
 162   1          SendOneByte(temp8);
 163   1        }*/  //test sending...
 164   1        procok=1; // preset the PROCCESS OK FLAG is 1,from the RX to PROCCESS OK the bit is 0.
 165   1        crcok=1;
 166   1        rw=1;  //accroding to the MAX485 IC, /RE=1 means transfering ,and /RE=0 means receiving ,after INIT ,defa
             -ult state is transfering for HOST
 167   1        while(1)
 168   1        { 
 169   2          BUZZER = 0;
 170   2          //P2_0 = 1;
 171   2          if((procok==1)&&(crcok==1))
 172   2          {       
 173   3            //temp16_1=mrx[3]+mrx[4]; //´ÓÍ¨ÐÅÖÐ»ñÈ¡Êý¾Ý²¢×¼±¸ÏÂÒ»Ö¡·¢ËÍ
 174   3            //temp16_1*=temp16_2; // get the data from the communication and prepare the next frame for send
 175   3            //temp16_1>>=7;
 176   3            RH=mrx[3];
 177   3            TP=mrx[4];
 178   3            switch(mrx[0])          // ?????????? (mrx[0]) ??????????
C51 COMPILER V9.60.7.0   HOST                                                              06/17/2025 10:27:24 PAGE 4   

 179   3                  {
 180   4                      case 0x01:
 181   4                          {
 182   5                              row4[1]=(RH/10)+0x30;
 183   5                              row4[2]=(RH%10)+0x30;
 184   5                              row5[1]=(TP/10)+0x30;
 185   5                              row5[2]=(TP%10)+0x30;
 186   5                              // ??:?????????TP?????????
 187   5                                  // TP>28
 188   5                                  if (row5[1] > '2' || (row5[1] == '2' && row5[2] >= '9')) {
 189   6                                      COOL_FAN = 0; 
 190   6                                      BUZZER = 0;
 191   6                                      RED_LED = 0;
 192   6                                      YELLOW_LED = 1;
 193   6                                      GREEN_LED = 1;
 194   6                                  }
 195   5                                  
 196   5                                  else if ((row5[1] == '2' && row5[2] == '6') ) {
 197   6                                      COOL_FAN = 1;
 198   6                                      HEAT_FAN = 1;
 199   6                                      BUZZER = 1;
 200   6                                      GREEN_LED = 0;
 201   6                                  }
 202   5                                  else if ((row5[1] == '2' && row5[2] >= '7')) {
 203   6                                      COOL_FAN = 0; 
 204   6                                      YELLOW_LED = 0;
 205   6                                      BUZZER = 1;
 206   6                                      GREEN_LED = 1;
 207   6                                  }
 208   5                                  else if ((row5[1] == '2' && row5[2] <= '5')) {
 209   6                                    HEAT_FAN = 0; 
 210   6                                    YELLOW_LED = 0;
 211   6                                    BUZZER = 1;
 212   6                                    GREEN_LED = 1;
 213   6                                  }
 214   5                                  else if (row5[1] < '2' || (row5[1] == '2' && row5[2] <= '3')) {
 215   6                                    HEAT_FAN = 0; 
 216   6                                    BUZZER = 0;
 217   6                                    RED_LED = 0;
 218   6                                    YELLOW_LED = 1;
 219   6                                    GREEN_LED = 1;
 220   6                                  }
 221   5                                  else {
 222   6                                      COOL_FAN = 1;
 223   6                                      HEAT_FAN = 1;
 224   6                                      BUZZER = 1;
 225   6                                      //HUMIDIFIER = 0;
 226   6                                    
 227   6                                  
 228   6                                  }
 229   5                                  if((row4[1] == '6' && row4[2] == '0') ){
 230   6                                    HUMIDIFIER = 1;
 231   6                                  }
 232   5                                  else if ((row4[1] == '5' && row4[2] <= '8')||(row4[1] == '6' && row4[2] >= '2')){
 233   6                                  HUMIDIFIER = 0;
 234   6                                  }
 235   5                                  else {
 236   6                                  HUMIDIFIER = 1;
 237   6                                  }
 238   5                              
 239   5                              // ****************************************
 240   5                              break; // ??switch??
C51 COMPILER V9.60.7.0   HOST                                                              06/17/2025 10:27:24 PAGE 5   

 241   5                          }
 242   4                      case 0x02:
 243   4                          {
 244   5                              // ??LCD??????2?????
 245   5                              row4[5]=(RH/10)+0x30;
 246   5                              row4[6]=(RH%10)+0x30;
 247   5                              // ??LCD??????2?????
 248   5                              row5[5]=(TP/10)+0x30;
 249   5                              row5[6]=(TP%10)+0x30;
 250   5                              if (row5[5] > '2' || (row5[5] == '2' && row5[6] >= '9')) {
 251   6                                      COOL_FAN = 0; 
 252   6                                      BUZZER = 0;
 253   6                                      RED_LED = 0;
 254   6                                      YELLOW_LED = 1;
 255   6                                      GREEN_LED = 1;
 256   6                                  }
 257   5                                  
 258   5                                  else if ((row5[5] == '2' && row5[6] == '6') ) {
 259   6                                      COOL_FAN = 1;
 260   6                                      HEAT_FAN = 1;
 261   6                                      BUZZER = 1;
 262   6                                      GREEN_LED = 0;
 263   6                                  }
 264   5                                  else if ((row5[5] == '2' && row5[6] >= '7')) {
 265   6                                      COOL_FAN = 0; 
 266   6                                      YELLOW_LED = 0;
 267   6                                      BUZZER = 1;
 268   6                                      GREEN_LED = 1;
 269   6                                  }
 270   5                                  else if ((row5[6] == '2' && row5[6] <= '5')) {
 271   6                                    HEAT_FAN = 0; 
 272   6                                    YELLOW_LED = 0;
 273   6                                    BUZZER = 1;
 274   6                                    GREEN_LED = 1;
 275   6                                  }
 276   5                                  else if (row5[5] < '2' || (row5[5] == '2' && row5[6] <= '3')) {
 277   6                                    HEAT_FAN = 0; 
 278   6                                    BUZZER = 0;
 279   6                                    RED_LED = 0;
 280   6                                    YELLOW_LED = 1;
 281   6                                    GREEN_LED = 1;
 282   6                                  }
 283   5                                  else {
 284   6                                      COOL_FAN = 1;
 285   6                                      HEAT_FAN = 1;
 286   6                                      BUZZER = 1;
 287   6                                      //HUMIDIFIER = 0;
 288   6                                  
 289   6                                  }
 290   5                                  if((row4[5] == '6' && row4[6] == '0') ){
 291   6                                    HUMIDIFIER = 1;
 292   6                                  }
 293   5                                  else if ((row4[5] == '5' && row4[6] <= '8')||(row4[5] == '6' && row4[6] >= '2')){
 294   6                                  HUMIDIFIER = 0;
 295   6                                  }
 296   5                                  else {
 297   6                                  HUMIDIFIER = 1;
 298   6                                  }
 299   5                              // ** ????2???,??P2.0???? **
 300   5                              break; // ??switch??
 301   5                          }
 302   4                      case 0x03:
C51 COMPILER V9.60.7.0   HOST                                                              06/17/2025 10:27:24 PAGE 6   

 303   4                          {
 304   5                              // ??LCD??????3?????
 305   5                              row4[9]=(RH/10)+0x30;
 306   5                              row4[10]=(RH%10)+0x30;
 307   5                              // ??LCD??????3?????
 308   5                              row5[9]=(TP/10)+0x30;
 309   5                              row5[10]=(TP%10)+0x30;
 310   5                              if (row5[9] > '2' || (row5[9] == '2' && row5[10] >= '9')) {
 311   6                                      COOL_FAN = 0; 
 312   6                                      BUZZER = 0;
 313   6                                      RED_LED = 0;
 314   6                                      YELLOW_LED = 1;
 315   6                                      GREEN_LED = 1;
 316   6                                  }
 317   5                                  
 318   5                                  else if ((row5[9] == '2' && row5[10] == '6') ) {
 319   6                                      COOL_FAN = 1;
 320   6                                      HEAT_FAN = 1;
 321   6                                      BUZZER = 1;
 322   6                                      GREEN_LED = 0;
 323   6                                  }
 324   5                                  else if ((row5[9] == '2' && row5[10] >= '7')) {
 325   6                                      COOL_FAN = 0; 
 326   6                                      YELLOW_LED = 0;
 327   6                                      BUZZER = 1;
 328   6                                      GREEN_LED = 1;
 329   6                                  }
 330   5                                  else if ((row5[9] == '2' && row5[10] <= '5')) {
 331   6                                    HEAT_FAN = 0; 
 332   6                                    YELLOW_LED = 0;
 333   6                                    BUZZER = 1;
 334   6                                    GREEN_LED = 1;
 335   6                                  }
 336   5                                  else if (row5[9] < '2' || (row5[9] == '2' && row5[10] <= '3')) {
 337   6                                    HEAT_FAN = 0; 
 338   6                                    BUZZER = 0;
 339   6                                    RED_LED = 0;
 340   6                                    YELLOW_LED = 1;
 341   6                                    GREEN_LED = 1;
 342   6                                  }
 343   5                                  else {
 344   6                                      COOL_FAN = 1;
 345   6                                      HEAT_FAN = 1;
 346   6                                      BUZZER = 1;
 347   6                                      //HUMIDIFIER = 0;
 348   6                                  
 349   6                                  }
 350   5                                  if((row4[9] == '6' && row4[10] == '0') ){
 351   6                                    HUMIDIFIER = 1;
 352   6                                  }
 353   5                                  else if ((row4[9] == '5' && row4[10] <= '8')||(row4[9] == '6' && row4[10] >= '2')){
 354   6                                  HUMIDIFIER = 0;
 355   6                                  }
 356   5                                  else {
 357   6                                  HUMIDIFIER = 1;
 358   6                                  }
 359   5                               // ** ????3???,??P2.0???? **
 360   5                              break; // ??switch??
 361   5                          }
 362   4                      default:
 363   4                          {
 364   5                              // ?????????,??????
C51 COMPILER V9.60.7.0   HOST                                                              06/17/2025 10:27:24 PAGE 7   

 365   5                              break; // ??switch??
 366   5                          }
 367   4                  }
 368   3            
 369   3            DisplayListChar(5, 0, row4); //ÔÚÒº¾§ÏÔÊ¾Æ÷µÄÊÊµ±ÇøÓòÏÔÊ¾Êý¾Ý display the
             - data at the proper zone on the LCD
 370   3            DisplayListChar(5, 1, row5); //ÔÚÒº¾§ÏÔÊ¾Æ÷µÄÊÊµ±ÇøÓòÏÔÊ¾Êý¾Ý display the
             - data at the proper zone on the LCD
 371   3      
 372   3            delaycnt=0x3ff;
 373   3            while(delaycnt--){}
 374   3            rw=1;
 375   3            reving=0;
 376   3            send101[0]=(asknode++)+0x01;  // rolling the node of SLAVE for polling
 377   3            asknode%=3;
 378   3            temp16=Crc16(send101,6);  // generate the CRC and save it in an 16bit var
*** WARNING C182 IN LINE 378 OF HOST.c: pointer to different objects
 379   3            for(i=0;i<6;i++){mtx[i]=send101[i];}
 380   3            mtx[6]=(temp16>>8)&0x00ff;
 381   3            mtx[7]=temp16&0x00ff;
 382   3            delaycnt=0x3ff;
 383   3            while(delaycnt--){}
 384   3            for(i=0;i<8;i++)
 385   3            { temp8=mtx[i];
 386   4              SendOneByte(temp8);
 387   4            }
 388   3            //tcnt=~tcnt;
 389   3            //tcnt=~tcnt; // generate a pulse to the counter in proteus when send an data asking frame
 390   3            procok=0;
 391   3            crcok=0;
 392   3            delaycnt=0x3ff;
 393   3            while(delaycnt--){}
 394   3            rw=0;
 395   3            reving=1; // blink the led when sent a data asking frame
 396   3          }
 397   2        }
 398   1      }
 399          
 400          void Timer0Interrupt(void) interrupt 1
 401          {
 402   1          //TH0 = 0x3C;
 403   1          //TL0 = 0x0B0;
 404   1        if(++timercnt==5)
 405   1        { procok=1;
 406   2          timercnt=0;
 407   2        }
 408   1      
 409   1      }
 410          
 411          void UARTInterrupt(void) interrupt 4
 412          { uchar byterev;
 413   1          if(RI)
 414   1          {
 415   2              RI = 0;
 416   2              byterev=SBUF;
 417   2          mdproc(byterev);
 418   2          }
 419   1          else
 420   1              TI = 0;
 421   1      }
 422          
 423          
C51 COMPILER V9.60.7.0   HOST                                                              06/17/2025 10:27:24 PAGE 8   

 424          void mdproc(uchar b)
 425          { Uint16 temp16_1,temp16_2;
 426   1        if(nodeok==0)
 427   1        { if(b==send101[0])
 428   2          { nodeok=1;
 429   3            revptr=1;
 430   3            mrx[0]=b;
 431   3          }
 432   2        }
 433   1        else if(revptr<11)
 434   1        { mrx[revptr++]=b;
 435   2        }
 436   1        else
 437   1        {
 438   2          revptr=0;
 439   2          nodeok=0;
 440   2          temp16_1=Crc16(mrx,9);
*** WARNING C182 IN LINE 440 OF HOST.c: pointer to different objects
 441   2          temp16_2=mrx[9];
 442   2          temp16_2<<=8;
 443   2          temp16_2|=mrx[10];
 444   2          if(temp16_1==temp16_2)
 445   2          { crcok=1;
 446   3            //rcnt=~rcnt;
 447   3            //rcnt=~rcnt; // generate a pulse to the counter in proteus when received correct frame
 448   3          }
 449   2                  
 450   2        }
 451   1      }
 452          
 453          void SendOneByte(unsigned char c)
 454          {
*** WARNING C235 IN LINE 454 OF HOST.c: parameter 1: different types
 455   1          SBUF = c;
 456   1          while(!TI);
 457   1          TI = 0;
 458   1      }
 459          
 460          
 461          void InitUART(void)
 462          {
 463   1          TMOD = 0x20;
 464   1          SCON = 0x50;
 465   1          TH1 = 0xFE;
 466   1          TL1 = TH1;
 467   1          PCON = 0x00;
 468   1          EA = 1;
 469   1          ES = 1;
 470   1          TR1 = 1;
 471   1        
 472   1        TMOD |= 0x01;
 473   1          //TH0 = 0x3C;
 474   1          //TL0 = 0x0B0;  // timer sets at 20ms
 475   1          ET0 = 1;
 476   1          TR0 = 1;
 477   1      
 478   1      
 479   1      }
 480          
 481          
 482          Uint16 Crc16(uchar *puchMsg, Uint16 usDataLen) 
 483          { 
C51 COMPILER V9.60.7.0   HOST                                                              06/17/2025 10:27:24 PAGE 9   

*** WARNING C235 IN LINE 483 OF HOST.c: parameter 1: different types
 484   1        Uint16 uchCRCHi = 0xFF ;              /* ¸ßCRC×Ö½Ú³õÊ¼»¯  */ 
 485   1        Uint16 uchCRCLo = 0xFF ;              /* µÍCRC ×Ö½Ú³õÊ¼»¯ */ 
 486   1        Uint16 temp16;
 487   1        Uint32 uIndex ;                      /* CRCÑ­»·ÖÐµÄË÷Òý  */ 
 488   1        while (usDataLen--)                  /* ´«ÊäÏûÏ¢»º³åÇø   */ 
 489   1        { 
 490   2          temp16=*puchMsg++;
 491   2          uIndex = uchCRCHi ^ temp16 ; /* ¼ÆËãCRC          */ 
 492   2          uchCRCHi = uchCRCLo ^ auchCRCHi[uIndex] ; 
 493   2          uchCRCLo = auchCRCLo[uIndex] ; 
 494   2        } 
 495   1        return (uchCRCHi << 8 | uchCRCLo) ; 
 496   1      }
 497          
 498          //Ð´Êý¾Ý
 499          void WriteDataLCD(unsigned char WDLCD)
 500          {
 501   1       ReadStatusLCD(); //¼ì²âÃ¦
 502   1       LCD_Data = WDLCD;
 503   1       LCD_RS = 1;
 504   1       LCD_RW = 0;
 505   1       LCD_E = 0; //Èô¾§ÕñËÙ¶ÈÌ«¸ß¿ÉÒÔÔÚÕâºó¼ÓÐ¡µÄÑÓÊ±
 506   1       LCD_E = 0; //ÑÓÊ±
 507   1       LCD_E = 0;
 508   1       LCD_E = 1;
 509   1      }
 510          
 511          //Ð´Ö¸Áî
 512          void WriteCommandLCD(unsigned char WCLCD,BuysC) //BuysCÎª0Ê±ºöÂÔÃ¦¼ì²â
 513          {
 514   1       if (BuysC) ReadStatusLCD(); //¸ù¾ÝÐèÒª¼ì²âÃ¦
 515   1       LCD_Data = WCLCD;
 516   1       LCD_RS = 0;
 517   1       LCD_RW = 0; 
 518   1       LCD_E = 0;
 519   1       LCD_E = 0;  
 520   1       LCD_E = 1; 
 521   1      }
 522          
 523          //¶ÁÊý¾Ý
 524          unsigned char ReadDataLCD(void)
 525          {
 526   1       LCD_RS = 1; 
 527   1       LCD_RW = 1;
 528   1       LCD_E = 0;
 529   1       LCD_E = 0;
 530   1       LCD_E = 1;
 531   1       return(LCD_Data);
 532   1      }
 533          
 534          //¶Á×´Ì¬
 535          unsigned char ReadStatusLCD(void)
 536          {
 537   1       LCD_Data = 0xFF; 
 538   1       LCD_RS = 0;
 539   1       LCD_RW = 1;
 540   1       LCD_E = 0;
 541   1       LCD_E = 0;
 542   1       LCD_E = 1;
 543   1       while (LCD_Data & Busy); //¼ì²âÃ¦ÐÅºÅ
 544   1       return(LCD_Data);
C51 COMPILER V9.60.7.0   HOST                                                              06/17/2025 10:27:24 PAGE 10  

 545   1      }
 546          
 547          void LCDInit(void) //LCM³õÊ¼»¯
 548          {
 549   1       LCD_Data = 0;
 550   1       WriteCommandLCD(0x38,0); //Èý´ÎÏÔÊ¾Ä£Ê½ÉèÖÃ£¬²»¼ì²âÃ¦ÐÅºÅ
 551   1       Delay5Ms(); 
 552   1       WriteCommandLCD(0x38,0);
 553   1       Delay5Ms(); 
 554   1       WriteCommandLCD(0x38,0);
 555   1       Delay5Ms(); 
 556   1      
 557   1       WriteCommandLCD(0x38,1); //ÏÔÊ¾Ä£Ê½ÉèÖÃ,¿ªÊ¼ÒªÇóÃ¿´Î¼ì²âÃ¦ÐÅºÅ
 558   1       WriteCommandLCD(0x08,1); //¹Ø±ÕÏÔÊ¾
 559   1       WriteCommandLCD(0x01,1); //ÏÔÊ¾ÇåÆÁ
 560   1       WriteCommandLCD(0x06,1); // ÏÔÊ¾¹â±êÒÆ¶¯ÉèÖÃ
 561   1       WriteCommandLCD(0x0C,1); // ÏÔÊ¾¿ª¼°¹â±êÉèÖÃ
 562   1      }
 563          
 564          //°´Ö¸¶¨Î»ÖÃÏÔÊ¾Ò»¸ö×Ö·û
 565          void DisplayOneChar(unsigned char X, unsigned char Y, unsigned char DData)
 566          {
 567   1       Y &= 0x1;
 568   1       X &= 0xF; //ÏÞÖÆX²»ÄÜ´óÓÚ15£¬Y²»ÄÜ´óÓÚ1
 569   1       if (Y) X |= 0x40; //µ±ÒªÏÔÊ¾µÚ¶þÐÐÊ±µØÖ·Âë+0x40;
 570   1       X |= 0x80; // Ëã³öÖ¸ÁîÂë
 571   1       WriteCommandLCD(X, 0); //ÕâÀï²»¼ì²âÃ¦ÐÅºÅ£¬·¢ËÍµØÖ·Âë
 572   1       WriteDataLCD(DData);
 573   1      }
 574          
 575          //°´Ö¸¶¨Î»ÖÃÏÔÊ¾Ò»´®×Ö·û
 576          void DisplayListChar(unsigned char X, unsigned char Y, unsigned char *DData)
 577          {
 578   1       unsigned char ListLength;
 579   1      
 580   1        ListLength = 0;
 581   1       Y &= 0x1;
 582   1       X &= 0xF; //ÏÞÖÆX²»ÄÜ´óÓÚ15£¬Y²»ÄÜ´óÓÚ1
 583   1       while (DData[ListLength]>=0x20) //Èôµ½´ï×Ö´®Î²ÔòÍË³ö
 584   1        {
 585   2         if (X <= 0xF) //X×ø±êÓ¦Ð¡ÓÚ0xF
 586   2          {
 587   3           DisplayOneChar(X, Y, DData[ListLength]); //ÏÔÊ¾µ¥¸ö×Ö·û
 588   3           ListLength++;
 589   3           X++;
 590   3          }
 591   2        }
 592   1      }
 593          
 594          //5msÑÓÊ±
 595          void Delay5Ms(void)
 596          {
 597   1       unsigned int TempCyc = 5552;
 598   1       while(TempCyc--);
 599   1      }
 600          
 601          //400msÑÓÊ±
 602          void Delay400Ms(void)
 603          {
 604   1       unsigned char TempCycA = 5;
 605   1       unsigned int TempCycB;
 606   1       while(TempCycA--)
C51 COMPILER V9.60.7.0   HOST                                                              06/17/2025 10:27:24 PAGE 11  

 607   1       {
 608   2        TempCycB=7269;
 609   2        while(TempCycB--);
 610   2       };
 611   1      }
 612          
 613          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1668    ----
   CONSTANT SIZE    =   1076    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     53      27
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  4 WARNING(S),  0 ERROR(S)
